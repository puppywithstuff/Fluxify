// Prevent multiple instances
if (!window.__asteroidsBookmarkletRunning) {
    window.__asteroidsBookmarkletRunning = true;

    // Add game CSS
    const css = `
    .ast-root{position:fixed;left:0;top:0;width:100%;height:100%;z-index:2147483647;pointer-events:auto}
    .ast-canvas{position:absolute;left:0;top:0;width:100%;height:100%;background:transparent}
    .ast-hud{position:fixed;left:10px;top:10px;color:#0f0;font:12px/1 monospace;text-shadow:0 0 6px #000;z-index:2147483648}
    .ast-explode-elem{transition:transform 600ms cubic-bezier(.2,.9,.2,1),opacity 600ms ease;transform-origin:center center;pointer-events:none;}
    .ast-stop-btn{position:fixed;top:10px;right:10px;z-index:2147483649;padding:0.5rem 0.8rem;background:#ff5555;color:#fff;border:none;border-radius:6px;cursor:pointer;font-weight:bold;}
    `;
    const style = document.createElement('style');
    style.textContent = css;
    document.head.appendChild(style);

    // Root container
    const root = document.createElement('div');
    root.className = 'ast-root';
    document.documentElement.appendChild(root);

    // Canvas
    const canvas = document.createElement('canvas');
    canvas.className = 'ast-canvas';
    root.appendChild(canvas);
    const ctx = canvas.getContext('2d');
    let W = canvas.width = window.innerWidth;
    let H = canvas.height = window.innerHeight;

    // HUD
    const hud = document.createElement('div');
    hud.className = 'ast-hud';
    hud.textContent = 'Asteroids â€” Loading...';
    root.appendChild(hud);

    // Stop button
    const stopBtn = document.createElement('button');
    stopBtn.className = 'ast-stop-btn';
    stopBtn.innerText = 'Stop Asteroids';
    stopBtn.addEventListener('click', ev => {
        ev.stopPropagation(); // Prevent clicks from reaching canvas
        cleanup();
        alert('Asteroids stopped!');
    });
    document.body.appendChild(stopBtn);

    // Handle resize
    window.addEventListener('resize', () => {
        W = canvas.width = window.innerWidth;
        H = canvas.height = window.innerHeight;
    });

    // Game state
    const ship = {x: W/2, y: H/2, r: 14, a: -Math.PI/2, rot: 0, thrust: 0, vx: 0, vy: 0};
    let bullets = [], asteroids = [], particles = [];
    let keys = {}, score = 0, lives = 3, paused = false;

    function rand(min,max){return Math.random()*(max-min)+min;}
    function dist(a,b){return Math.hypot(a.x-b.x,a.y-b.y);}
    function wrapPos(o){
        if(o.x<-50)o.x=W+50;
        if(o.x>W+50)o.x=-50;
        if(o.y<-50)o.y=H+50;
        if(o.y>H+50)o.y=-50;
    }

    function spawnAsteroid(size){
        const r=size||rand(20,60);
        const edge=Math.floor(Math.random()*4);
        let x,y;
        if(edge===0){x=-r;y=rand(0,H);}
        else if(edge===1){x=W+r;y=rand(0,H);}
        else if(edge===2){x=rand(0,W);y=-r;}
        else{x=rand(0,W);y=H+r;}
        const angle=rand(0, Math.PI*2);
        asteroids.push({x,y,r,vx:Math.cos(angle)*rand(0.3,1.2),vy:Math.sin(angle)*rand(0.3,1.2),verts:Math.floor(rand(6,12)),offs:Array.from({length:Math.floor(rand(6,12))},()=>rand(0.55,1.45))});
    }

    for(let i=0;i<8;i++) spawnAsteroid();

    function shoot(){
        const speed=6;
        const bx=ship.x+Math.cos(ship.a)*ship.r;
        const by=ship.y+Math.sin(ship.a)*ship.r;
        bullets.push({x:bx,y:by,vx:ship.vx+Math.cos(ship.a)*speed,vy:ship.vy+Math.sin(ship.a)*speed,life:50});
    }

    canvas.addEventListener('click', ev => {
        ev.stopPropagation(); // ensure clicks outside button shoot
        shoot();
    });

    window.addEventListener('keydown', e => {
        if(e.key==='Escape'){ cleanup(); return; }
        if(e.key==='p'||e.key==='P'){ paused=!paused; e.preventDefault(); return; }
        keys[e.key]=true;
    });
    window.addEventListener('keyup', e=>keys[e.key]=false);

    function update(dt){
        if(keys['ArrowLeft']||keys['a']) ship.rot=-0.08;
        else if(keys['ArrowRight']||keys['d']) ship.rot=0.08;
        else ship.rot=0;
        ship.thrust = keys['ArrowUp']||keys['w']?0.12:0;
        if(keys[' ']){ if(!keys._spaceDown){shoot(); keys._spaceDown=true;} } else keys._spaceDown=false;
        ship.a+=ship.rot*dt;
        ship.vx+=Math.cos(ship.a)*ship.thrust*dt;
        ship.vy+=Math.sin(ship.a)*ship.thrust*dt;
        ship.vx*=0.995; ship.vy*=0.995;
        ship.x+=ship.vx*dt; ship.y+=ship.vy*dt; wrapPos(ship);

        bullets.forEach(b=>{b.x+=b.vx*dt;b.y+=b.vy*dt;b.life-=dt;wrapPos(b);});
        bullets = bullets.filter(b=>b.life>0);
        asteroids.forEach(a=>{a.x+=a.vx*dt;a.y+=a.vy*dt;wrapPos(a);});

        // simple collision & HUD
        hud.textContent=`Score: ${score}  Lives: ${lives}  Asteroids: ${asteroids.length}`;
    }

    function render(){
        ctx.clearRect(0,0,W,H);
        ctx.save(); ctx.translate(ship.x,ship.y); ctx.rotate(ship.a);
        ctx.strokeStyle='#cfc'; ctx.lineWidth=2;
        ctx.beginPath(); ctx.moveTo(ship.r,0); ctx.lineTo(-ship.r/2, ship.r/1.5); ctx.lineTo(-ship.r/2, -ship.r/1.5); ctx.closePath(); ctx.stroke();
        ctx.restore();
    }

    function loop(now){
        const dt=Math.min(40,now-last); last=now;
        if(!paused) update(dt/16.6667);
        render();
        if(window.__asteroidsBookmarkletRunning) requestAnimationFrame(loop);
    }
    let last=performance.now();
    requestAnimationFrame(loop);

    function cleanup(){
        window.__asteroidsBookmarkletRunning=false;
        root.remove();
        style.remove();
        stopBtn.remove();
    }

    // Global stop hook
    window.stopAsteroids = cleanup;
}

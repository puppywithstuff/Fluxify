// Prevent multiple instances
if (!window.__asteroidsBookmarkletRunning) {
    window.__asteroidsBookmarkletRunning = true;

    // Create black overlay
    const overlay = document.createElement('div');
    Object.assign(overlay.style, {
        position: 'fixed',
        top: 0,
        left: 0,
        width: '100%',
        height: '100%',
        background: '#000',
        zIndex: 2147483645
    });
    document.body.appendChild(overlay);

    // Game CSS
    const css = `
    .ast-root{position:fixed;left:0;top:0;width:100%;height:100%;z-index:2147483646}
    .ast-canvas{position:absolute;left:0;top:0;width:100%;height:100%;background:transparent}
    .ast-hud{position:fixed;left:10px;top:10px;color:#0f0;font:12px/1 monospace;text-shadow:0 0 6px #000}
    .ast-fire-btn{position:fixed;bottom:20px;right:20px;z-index:2147483647;padding:10px 18px;background:#00ff99;color:#000;border:none;border-radius:6px;font-weight:bold;cursor:pointer;user-select:none;}
    .ast-explode-elem{transition:transform 600ms cubic-bezier(.2,.9,.2,1),opacity 600ms ease;transform-origin:center center;pointer-events:none;}
    .ast-gameover {
        position: fixed;
        top: 45%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: red;
        font-size: 96px;
        font-family: monospace;
        text-shadow: 0 0 30px #f00, 0 0 60px #ff0;
        z-index: 2147483648;
        display: none;
        text-align: center;
        opacity: 0;
        transition: opacity 1s ease-in;
    }
    .ast-restart-btn {
        position: fixed;
        top: 60%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: #00ff99;
        color: #000;
        font-weight: bold;
        font-family: monospace;
        padding: 14px 28px;
        border: none;
        border-radius: 10px;
        font-size: 20px;
        cursor: pointer;
        opacity: 0;
        display: none;
        transition: opacity 1s ease-in;
        z-index: 2147483649;
        box-shadow: 0 0 20px #00ff99;
    }
    .ast-restart-btn:hover {
        background: #00ffaa;
    }
    `;
    const style = document.createElement('style');
    style.textContent = css;
    document.head.appendChild(style);

    // Root container
    const root = document.createElement('div');
    root.className = 'ast-root';
    document.documentElement.appendChild(root);

    // Canvas
    const canvas = document.createElement('canvas');
    canvas.className = 'ast-canvas';
    root.appendChild(canvas);
    const ctx = canvas.getContext('2d');
    let W = canvas.width = window.innerWidth;
    let H = canvas.height = window.innerHeight;

    // HUD
    const hud = document.createElement('div');
    hud.className = 'ast-hud';
    root.appendChild(hud);

    // Game over text
    const gameOverText = document.createElement('div');
    gameOverText.className = 'ast-gameover';
    gameOverText.textContent = 'GAME OVER';
    document.body.appendChild(gameOverText);

    // Restart button
    const restartBtn = document.createElement('button');
    restartBtn.className = 'ast-restart-btn';
    restartBtn.textContent = 'RESTART';
    restartBtn.addEventListener('click', restartGame);
    document.body.appendChild(restartBtn);

    // Stop & revert button
    const stopBtn = document.createElement('button');
    stopBtn.textContent = 'STOP & REVERT';
    Object.assign(stopBtn.style, {
        position: 'fixed',
        bottom: '20px',
        left: '20px',
        zIndex: 2147483647,
        padding: '10px 18px',
        background: '#ff5555',
        color: '#fff',
        border: 'none',
        borderRadius: '6px',
        fontWeight: 'bold',
        cursor: 'pointer'
    });
    stopBtn.addEventListener('click', cleanup);
    document.body.appendChild(stopBtn);

    // Resize
    window.addEventListener('resize', () => {
        W = canvas.width = window.innerWidth;
        H = canvas.height = window.innerHeight;
    });

    let ship, bullets, asteroids, particles, keys, score, lives, paused, gameOver;

    function initGame() {
        ship = {x: W/2, y: H/2, r: 14, a: -Math.PI/2, rot: 0, thrust: 0, vx: 0, vy: 0};
        bullets = [];
        asteroids = [];
        particles = [];
        keys = {};
        score = 0;
        lives = 3;
        paused = false;
        gameOver = false;
        hud.textContent = '';
        gameOverText.style.display = 'none';
        gameOverText.style.opacity = '0';
        restartBtn.style.display = 'none';
        restartBtn.style.opacity = '0';
        for(let i=0;i<8;i++) spawnAsteroid();
    }

    function rand(min, max){ return Math.random() * (max - min) + min; }
    function dist(a,b){ return Math.hypot(a.x-b.x, a.y-b.y); }
    function wrapPos(o){
        if(o.x<-50)o.x=W+50;
        if(o.x>W+50)o.x=-50;
        if(o.y<-50)o.y=H+50;
        if(o.y>H+50)o.y=-50;
    }

    function spawnAsteroid(size, x, y){
        const r = size || rand(20,60);
        let posX = x !== undefined ? x : (rand(0,W));
        let posY = y !== undefined ? y : (rand(0,H));
        const angle = rand(0, Math.PI*2);
        asteroids.push({
            x: posX,
            y: posY,
            r,
            vx: Math.cos(angle)*rand(0.3,1.2),
            vy: Math.sin(angle)*rand(0.3,1.2),
            verts: Math.floor(rand(6,12)),
            offs: Array.from({length: Math.floor(rand(6,12))},()=>rand(0.55,1.45))
        });
    }

    function blowElementAt(x,y){
        try {
            const el = document.elementFromPoint(Math.min(W-1, Math.max(0,x)), Math.min(H-1, Math.max(0,y)));
            if(!el || el===canvas || root.contains(el) || el===document.documentElement || el===document.body) return;
            const rect = el.getBoundingClientRect();
            const clone = el.cloneNode(true);
            clone.style.position = 'fixed';
            clone.style.left = rect.left+'px';
            clone.style.top = rect.top+'px';
            clone.style.width = rect.width+'px';
            clone.style.height = rect.height+'px';
            clone.style.margin = '0';
            clone.style.zIndex = 2147483646;
            clone.classList.add('ast-explode-elem');
            document.body.appendChild(clone);
            if(!el.dataset._astored){ el.dataset._astored='1'; el.style.transition='opacity 400ms ease'; }
            el.style.opacity='0.05';
            const dx = (clone.getBoundingClientRect().left + rect.width/2) - W/2;
            const dy = (clone.getBoundingClientRect().top + rect.height/2) - H/2;
            const ang = Math.atan2(dy,dx) + (Math.random()-0.5);
            const tx = Math.cos(ang)*rand(120,400);
            const ty = Math.sin(ang)*rand(120,400);
            clone.style.transform = `translate(${tx}px,${ty}px) rotate(${rand(-720,720)}deg) scale(${rand(0.6,1.4)})`;
            clone.style.opacity='0';
            setTimeout(()=>clone.remove(), 800);
            setTimeout(()=>el.remove(), 1200);
        } catch(e){}
    }

    // Controls
    window.addEventListener('keydown', e => {
        if(e.key==='Escape'){ cleanup(); return; }
        if(e.key==='p'||e.key==='P'){ paused=!paused; e.preventDefault(); return; }
        keys[e.key] = true;
    });
    window.addEventListener('keyup', e => { keys[e.key] = false; });

    function shoot(){
        if (gameOver) return;
        const speed=6;
        const bx=ship.x+Math.cos(ship.a)*ship.r;
        const by=ship.y+Math.sin(ship.a)*ship.r;
        bullets.push({x:bx, y:by, vx:ship.vx+Math.cos(ship.a)*speed, vy:ship.vy+Math.sin(ship.a)*speed, life:50});
    }

    // Fire button
    const fireBtn = document.createElement('button');
    fireBtn.className = 'ast-fire-btn';
    fireBtn.textContent = 'FIRE';
    fireBtn.addEventListener('click', shoot);
    document.body.appendChild(fireBtn);

    function spawnParticle(x,y){
        particles.push({x,y,vx:rand(-3,3),vy:rand(-3,3),life:rand(20,60),s:rand(1,3)});
    }

    function splitAsteroid(a){
        if(a.r > 20){
            spawnAsteroid(a.r/2, a.x+rand(-10,10), a.y+rand(-10,10));
            spawnAsteroid(a.r/2, a.x+rand(-10,10), a.y+rand(-10,10));
        }
    }

    function update(dt){
        if (gameOver) return;

        if(keys['ArrowLeft']||keys['a']) ship.rot=-0.08;
        else if(keys['ArrowRight']||keys['d']) ship.rot=0.08;
        else ship.rot=0;
        ship.thrust = keys['ArrowUp']||keys['w'] ? 0.12 : 0;

        if(keys[' '] && !keys._spaceDown){ shoot(); keys._spaceDown=true; }
        if(!keys[' ']) keys._spaceDown=false;

        ship.a += ship.rot*dt;
        ship.vx += Math.cos(ship.a)*ship.thrust*dt;
        ship.vy += Math.sin(ship.a)*ship.thrust*dt;
        ship.vx *= 0.995;
        ship.vy *= 0.995;
        ship.x += ship.vx*dt;
        ship.y += ship.vy*dt;
        wrapPos(ship);

        bullets.forEach(b=>{b.x+=b.vx*dt; b.y+=b.vy*dt; b.life-=dt; wrapPos(b);});
        bullets = bullets.filter(b=>b.life>0);

        for(let i=asteroids.length-1;i>=0;i--){
            const a = asteroids[i];
            a.x+=a.vx*dt; a.y+=a.vy*dt; wrapPos(a);

            if(dist(a,ship)<a.r+ship.r){
                for(let k=0;k<30;k++){
                    particles.push({
                        x: ship.x,
                        y: ship.y,
                        vx: rand(-4,4),
                        vy: rand(-4,4),
                        life: rand(20,60),
                        s: rand(2,4)
                    });
                }
                lives--;
                ship.x=W/2; ship.y=H/2; ship.vx=0; ship.vy=0; ship.thrust=0;

                if (lives <= 0) {
                    hud.textContent = 'GAME OVER';
                    gameOverText.style.display = 'block';
                    restartBtn.style.display = 'block';
                    setTimeout(()=>{ gameOverText.style.opacity='1'; restartBtn.style.opacity='1'; }, 50);
                    gameOver = true;
                    return;
                }
            }

            for(let j=bullets.length-1;j>=0;j--){
                const b = bullets[j];
                if(Math.hypot(b.x-a.x,b.y-a.y)<a.r){
                    bullets.splice(j,1);
                    asteroids.splice(i,1);
                    score+=100;
                    for(let k=0;k<Math.floor(a.r/2);k++){
                        spawnParticle(a.x,a.y);
                    }
                    blowElementAt(a.x,a.y);
                    splitAsteroid(a);
                    break;
                }
            }
        }

        particles.forEach(p=>{p.x+=p.vx*dt; p.y+=p.vy*dt; p.life-=dt;});
        particles = particles.filter(p=>p.life>0);

        if(asteroids.length<6 && Math.random()<0.02) spawnAsteroid();

        hud.textContent=`Score: ${score}  Lives: ${lives}  Asteroids: ${asteroids.length}`;
    }

    function render(){
        ctx.clearRect(0,0,W,H);

        if (!gameOver) {
            ctx.save();
            ctx.translate(ship.x,ship.y);
            ctx.rotate(ship.a);
            ctx.strokeStyle='#cfc'; ctx.lineWidth=2;
            ctx.beginPath();
            ctx.moveTo(ship.r,0); ctx.lineTo(-ship.r/2, ship.r/1.5); ctx.lineTo(-ship.r/2, -ship.r/1.5); ctx.closePath();
            ctx.stroke();

            if(ship.thrust){
                ctx.fillStyle='orange';
                ctx.beginPath();
                ctx.moveTo(-ship.r/2,0);
                ctx.lineTo(-ship.r-5,5);
                ctx.lineTo(-ship.r-5,-5);
                ctx.closePath();
                ctx.fill();
            }
            ctx.restore();
        }

        ctx.strokeStyle='#fff'; ctx.lineWidth=2;
        asteroids.forEach(a=>{
            ctx.beginPath();
            for(let i=0;i<a.verts;i++){
                const ang=i/(a.verts)*Math.PI*2;
                const rad=a.r*a.offs[i];
                const px=a.x+Math.cos(ang)*rad;
                const py=a.y+Math.sin(ang)*rad;
                if(i===0) ctx.moveTo(px,py); else ctx.lineTo(px,py);
            }
            ctx.closePath(); ctx.stroke();
        });

        ctx.strokeStyle='#ff0'; ctx.lineWidth=1;
        bullets.forEach(b=>{ctx.beginPath();ctx.moveTo(b.x,b.y);ctx.lineTo(b.x-b.vx*2,b.y-b.vy*2);ctx.stroke();});

        ctx.fillStyle='#0f0';
        particles.forEach(p=>{ctx.beginPath(); ctx.arc(p.x,p.y,p.s,0,Math.PI*2); ctx.fill();});
    }

    function restartGame() {
        initGame();
    }

    function cleanup(){
        window.__asteroidsBookmarkletRunning=false;
        overlay.remove();
        root.remove();
        fireBtn.remove();
        stopBtn.remove();
        style.remove();
        gameOverText.remove();
        restartBtn.remove();
    }

    let last = performance.now();
    function loop(now){
        const dt = Math.min(40, now-last);
        last = now;
        if(!paused) update(dt/16.6667);
        render();
        if(window.__asteroidsBookmarkletRunning) requestAnimationFrame(loop);
    }

    initGame();
    requestAnimationFrame(loop);
}

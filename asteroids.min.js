// Prevent multiple instances
if (!window.__asteroidsBookmarkletRunning) {
    window.__asteroidsBookmarkletRunning = true;

    // Add game CSS
    const css = `
    .ast-root{position:fixed;left:0;top:0;width:100%;height:100%;z-index:2147483647}
    .ast-canvas{position:absolute;left:0;top:0;width:100%;height:100%;background:transparent}
    .ast-hud{position:fixed;left:10px;top:10px;color:#0f0;font:12px/1 monospace;text-shadow:0 0 6px #000}
    .ast-explode-elem{transition:transform 600ms cubic-bezier(.2,.9,.2,1),opacity 600ms ease;transform-origin:center center;pointer-events:none;}
    `;
    const style = document.createElement('style');
    style.textContent = css;
    document.head.appendChild(style);

    // Root container
    const root = document.createElement('div');
    root.className = 'ast-root';
    root.style.pointerEvents = 'auto';
    document.documentElement.appendChild(root);

    // Canvas
    const canvas = document.createElement('canvas');
    canvas.className = 'ast-canvas';
    root.appendChild(canvas);
    const ctx = canvas.getContext('2d');
    let W = canvas.width = window.innerWidth;
    let H = canvas.height = window.innerHeight;

    // HUD
    const hud = document.createElement('div');
    hud.className = 'ast-hud';
    hud.textContent = 'Asteroids — Loading...';
    root.appendChild(hud);

    // Resize
    window.addEventListener('resize', () => {
        W = canvas.width = window.innerWidth;
        H = canvas.height = window.innerHeight;
    });

    // Ship and game variables
    const ship = {x: W/2, y: H/2, r: 14, a: -Math.PI/2, rot: 0, thrust: 0, vx: 0, vy: 0};
    let bullets = [], asteroids = [], particles = [];
    let keys = {}, score = 0, lives = 3, paused = false;

    // Utility functions
    const rand = (min,max)=>Math.random()*(max-min)+min;
    const dist = (a,b)=>Math.hypot(a.x-b.x, a.y-b.y);
    const wrapPos = o=>{
        if(o.x<-50)o.x=W+50;
        if(o.x>W+50)o.x=-50;
        if(o.y<-50)o.y=H+50;
        if(o.y>H+50)o.y=-50;
    };

    function spawnAsteroid(size){
        const r=size||rand(20,60);
        const edge=Math.floor(Math.random()*4);
        let x,y;
        if(edge===0){x=-r;y=rand(0,H);}
        else if(edge===1){x=W+r;y=rand(0,H);}
        else if(edge===2){x=rand(0,W);y=-r;}
        else{x=rand(0,W);y=H+r;}
        const angle = rand(0, Math.PI*2);
        asteroids.push({x,y,r,vx:Math.cos(angle)*rand(0.3,1.2),vy:Math.sin(angle)*rand(0.3,1.2),verts: Math.floor(rand(6,12)), offs: Array.from({length:Math.floor(rand(6,12))},()=>rand(0.55,1.45))});
    }
    for(let i=0;i<8;i++) spawnAsteroid();

    function blowElementAt(x,y){
        try {
            const el=document.elementFromPoint(Math.min(W-1, Math.max(0,x)), Math.min(H-1, Math.max(0,y)));
            if(!el || el===canvas || root.contains(el) || el===document.documentElement || el===document.body) return;
            const rect=el.getBoundingClientRect();
            const clone=el.cloneNode(true);
            clone.style.position='fixed';
            clone.style.left=rect.left+'px';
            clone.style.top=rect.top+'px';
            clone.style.width=rect.width+'px';
            clone.style.height=rect.height+'px';
            clone.style.margin='0';
            clone.style.zIndex=2147483646;
            clone.classList.add('ast-explode-elem');
            document.body.appendChild(clone);
            if(!el.dataset._astored){ el.dataset._astored='1'; el.style.transition='opacity 400ms ease'; }
            el.style.opacity='0.05';
            const dx=(clone.getBoundingClientRect().left + rect.width/2)-W/2;
            const dy=(clone.getBoundingClientRect().top + rect.height/2)-H/2;
            const ang=Math.atan2(dy,dx)+(Math.random()-0.5);
            const tx=Math.cos(ang)*rand(120,400);
            const ty=Math.sin(ang)*rand(120,400);
            clone.style.transform=`translate(${tx}px,${ty}px) rotate(${rand(-720,720)}deg) scale(${rand(0.6,1.4)})`;
            clone.style.opacity='0';
            setTimeout(()=>clone.remove(),800);
            setTimeout(()=>el.remove(),1200);
        }catch(e){}
    }

    // Controls
    window.addEventListener('keydown', e=>{
        if(e.key==='Escape'){ cleanup(); return; }
        if(e.key==='p'||e.key==='P'){ paused=!paused; e.preventDefault(); return; }
        keys[e.key]=true;
    });
    window.addEventListener('keyup', e=>{ keys[e.key]=false; });
    canvas.addEventListener('click', shoot);

    function shoot(){
        const speed=6;
        const bx=ship.x+Math.cos(ship.a)*ship.r;
        const by=ship.y+Math.sin(ship.a)*ship.r;
        bullets.push({x:bx,y:by,vx:ship.vx+Math.cos(ship.a)*speed,vy:ship.vy+Math.sin(ship.a)*speed,life:50});
    }
    function spawnParticle(x,y){ particles.push({x,y,vx:rand(-3,3),vy:rand(-3,3),life:rand(20,60),s:rand(1,3)}); }
    function spawnFragment(x,y,r){ asteroids.push({x,y,r,vx:rand(-2,2),vy:rand(-2,2),verts:Math.floor(rand(6,10)),offs:Array.from({length:Math.floor(rand(6,10))},()=>rand(0.6,1.4))}); }

    function update(dt){
        if(keys['ArrowLeft']||keys['a']) ship.rot=-0.08;
        else if(keys['ArrowRight']||keys['d']) ship.rot=0.08;
        else ship.rot=0;
        ship.thrust = keys['ArrowUp']||keys['w'] ? 0.12 : 0;
        if(keys[' ']){ if(!keys._spaceDown){shoot(); keys._spaceDown=true;} } else keys._spaceDown=false;

        ship.a += ship.rot*dt;
        ship.vx += Math.cos(ship.a)*ship.thrust*dt;
        ship.vy += Math.sin(ship.a)*ship.thrust*dt;
        ship.vx *= 0.995;
        ship.vy *= 0.995;
        ship.x += ship.vx*dt;
        ship.y += ship.vy*dt;
        wrapPos(ship);

        bullets.forEach(b=>{b.x+=b.vx*dt; b.y+=b.vy*dt; b.life-=dt; wrapPos(b);});
        bullets = bullets.filter(b=>b.life>0);

        asteroids.forEach(a=>{a.x+=a.vx*dt; a.y+=a.vy*dt; wrapPos(a);});

        for(let i=asteroids.length-1;i>=0;i--){
            const a=asteroids[i];
            if(dist(a,ship)<a.r+ship.r){
                for(let k=0;k<8;k++) spawnParticle(ship.x,ship.y);
                lives--; ship.x=W/2; ship.y=H/2; ship.vx=0; ship.vy=0;
                if(lives<=0) hud.textContent='Game Over — refresh to play again';
            }
            for(let j=bullets.length-1;j>=0;j--){
                const b=bullets[j];
                if(Math.hypot(b.x-a.x,b.y-a.y)<a.r){
                    bullets.splice(j,1); asteroids.splice(i,1); score+=100;
                    for(let k=0;k<Math.floor(a.r/2);k++) spawnParticle(a.x,a.y);
                    blowElementAt(a.x,a.y);
                    if(a.r>20){ spawnFragment(a.x+2,a.y+2,a.r/1.6); spawnFragment(a.x-2,a.y-2,a.r/1.8);}
                    break;
                }
            }
        }

        particles.forEach(p=>{p.x+=p.vx*dt; p.y+=p.vy*dt; p.life-=dt;});
        particles = particles.filter(p=>p.life>0);

        if(asteroids.length<6 && Math.random()<0.02) spawnAsteroid();

        hud.textContent=`Score: ${score}  Lives: ${lives}  Asteroids: ${asteroids.length}`;
    }

    function render(){
        ctx.clearRect(0,0,W,H);
        ctx.save(); ctx.translate(ship.x,ship.y); ctx.rotate(ship.a);
        ctx.strokeStyle='#cfc'; ctx.lineWidth=2;
        ctx.beginPath(); ctx.moveTo(ship.r,0); ctx.lineTo(-ship.r/2, ship.r/1.5); ctx.lineTo(-ship.r/2, -ship.r/1.5); ctx.closePath(); ctx.stroke();
        ctx.restore();

        ctx.fillStyle='#0f0';
        particles.forEach(p=>{ctx.beginPath(); ctx.arc(p.x,p.y,p.s,0,Math.PI*2);ctx.fill();});

        ctx.strokeStyle='#fff'; ctx.lineWidth=2;
        asteroids.forEach(a=>{ctx.beginPath(); for(let i=0;i<a.verts;i++){const ang=i/(a.verts)*Math.PI*2;const rad=a.r*a.offs[i];ctx.lineTo(a.x+Math.cos(ang)*rad,a.y+Math.sin(ang)*rad);} ctx.closePath(); ctx.stroke();});

        ctx.strokeStyle='#ff0'; ctx.lineWidth=1;
        bullets.forEach(b=>{ctx.beginPath();ctx.moveTo(b.x,b.y);ctx.lineTo(b.x-b.vx*2,b.y-b.vy*2);ctx.stroke();});
    }

    // Cleanup function
    window.cleanupAsteroids = function(){
        window.__asteroidsBookmarkletRunning=false;
        window.removeEventListener('keydown',keydownHandler);
        window.removeEventListener('keyup',keyupHandler);
        canvas.removeEventListener('click',shoot);
        root.remove();
        style.remove();
        killBtn.remove();
    };

    // Kill button
    const killBtn = document.createElement('button');
    killBtn.innerText = "✖ Kill Asteroids";
    Object.assign(killBtn.style,{
        position:'fixed',top:'10px',right:'10px',zIndex:2147483648,
        padding:'6px 10px',background:'#ff5555',color:'#fff',border:'none',borderRadius:'6px',cursor:'pointer'
    });
    killBtn.onclick = window.cleanupAsteroids;
    document.body.appendChild(killBtn);

    // Main loop
    let last=performance.now();
    function loop(now){
        const dt=Math.min(40, now-last); last=now;
        if(!paused) update(dt/16.6667);
        render();
        if(window.__asteroidsBookmarkletRunning) requestAnimationFrame(loop);
    }
    requestAnimationFrame(loop);
}

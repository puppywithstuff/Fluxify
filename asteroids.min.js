// Prevent multiple instances
if (!window.__asteroidsBookmarkletRunning) {
    window.__asteroidsBookmarkletRunning = true;

    // === Black overlay ===
    const overlay = document.createElement('div');
    overlay.style.cssText = `
        position: fixed;
        top: 0; left: 0;
        width: 100vw; height: 100vh;
        background: black;
        z-index: 2147483646;
    `;
    document.body.appendChild(overlay);

    // Add game CSS
    const css = `
    .ast-root{position:fixed;left:0;top:0;width:100%;height:100%;z-index:2147483647}
    .ast-canvas{position:absolute;left:0;top:0;width:100%;height:100%;background:transparent}
    .ast-hud{position:fixed;left:10px;top:10px;color:#0f0;font:12px/1 monospace;text-shadow:0 0 6px #000;z-index:2147483648}
    .ast-fire-btn{position:fixed;bottom:20px;right:20px;z-index:2147483648;padding:10px 18px;background:#00ff99;color:#000;border:none;border-radius:6px;font-weight:bold;cursor:pointer;user-select:none;}
    .ast-stop-btn{position:fixed;bottom:20px;left:20px;z-index:2147483648;padding:10px 18px;background:#ff5555;color:#fff;border:none;border-radius:6px;font-weight:bold;cursor:pointer;user-select:none;}
    .ast-explode-elem{transition:transform 600ms cubic-bezier(.2,.9,.2,1),opacity 600ms ease;transform-origin:center center;pointer-events:none;}
    `;
    const style = document.createElement('style');
    style.textContent = css;
    document.head.appendChild(style);

    // Root container inside overlay
    const root = document.createElement('div');
    root.className = 'ast-root';
    overlay.appendChild(root);

    // Canvas
    const canvas = document.createElement('canvas');
    canvas.className = 'ast-canvas';
    root.appendChild(canvas);
    const ctx = canvas.getContext('2d');
    let W = canvas.width = window.innerWidth;
    let H = canvas.height = window.innerHeight;

    // HUD
    const hud = document.createElement('div');
    hud.className = 'ast-hud';
    hud.textContent = 'Asteroids â€” Loading...';
    overlay.appendChild(hud);

    // Resize handler
    function resizeHandler() {
        W = canvas.width = window.innerWidth;
        H = canvas.height = window.innerHeight;
    }
    window.addEventListener('resize', resizeHandler);

    // STOP button
    const stopBtn = document.createElement('button');
    stopBtn.className = 'ast-stop-btn';
    stopBtn.textContent = 'STOP';
    stopBtn.addEventListener('click', () => cleanup());
    document.body.appendChild(stopBtn);

    // FIRE button
    const fireBtn = document.createElement('button');
    fireBtn.className = 'ast-fire-btn';
    fireBtn.textContent = 'FIRE';
    fireBtn.addEventListener('click', () => shoot());
    document.body.appendChild(fireBtn);

    // === Your existing game code follows ===
    const ship = {x: W/2, y: H/2, r: 14, a: -Math.PI/2, rot: 0, thrust: 0, vx: 0, vy: 0};
    let bullets = [];
    let asteroids = [];
    let particles = [];
    let keys = {};
    let score = 0;
    let lives = 3;
    let paused = false;

    function rand(min, max){ return Math.random() * (max - min) + min; }
    function dist(a,b){ return Math.hypot(a.x-b.x, a.y-b.y); }
    function wrapPos(o){
        if(o.x<-50)o.x=W+50;
        if(o.x>W+50)o.x=-50;
        if(o.y<-50)o.y=H+50;
        if(o.y>H+50)o.y=-50;
    }
    function spawnAsteroid(size){
        const r = size || rand(20,60);
        const edge = Math.floor(Math.random()*4);
        let x,y;
        if(edge===0){x=-r;y=rand(0,H);}
        else if(edge===1){x=W+r;y=rand(0,H);}
        else if(edge===2){x=rand(0,W);y=-r;}
        else{x=rand(0,W);y=H+r;}
        const angle = rand(0, Math.PI*2);
        asteroids.push({
            x, y, r,
            vx: Math.cos(angle)*rand(0.3,1.2),
            vy: Math.sin(angle)*rand(0.3,1.2),
            verts: Math.floor(rand(6,12)),
            offs: Array.from({length: Math.floor(rand(6,12))},()=>rand(0.55,1.45))
        });
    }
    for(let i=0;i<8;i++) spawnAsteroid();

    window.addEventListener('keydown', e => {
        if(e.key==='Escape'){ cleanup(); return; }
        if(e.key==='p'||e.key==='P'){ paused=!paused; e.preventDefault(); return; }
        keys[e.key] = true;
    });
    window.addEventListener('keyup', e => { keys[e.key] = false; });

    function shoot(){
        const speed=6;
        const bx=ship.x+Math.cos(ship.a)*ship.r;
        const by=ship.y+Math.sin(ship.a)*ship.r;
        bullets.push({x:bx, y:by, vx:ship.vx+Math.cos(ship.a)*speed, vy:ship.vy+Math.sin(ship.a)*speed, life:50});
    }

    function update(dt){
        if(keys['ArrowLeft']||keys['a']) ship.rot=-0.08;
        else if(keys['ArrowRight']||keys['d']) ship.rot=0.08;
        else ship.rot=0;
        ship.thrust = keys['ArrowUp']||keys['w'] ? 0.12 : 0;
        if(keys[' ']){ if(!keys._spaceDown){shoot(); keys._spaceDown=true;} } else keys._spaceDown=false;

        ship.a += ship.rot*dt;
        ship.vx += Math.cos(ship.a)*ship.thrust*dt;
        ship.vy += Math.sin(ship.a)*ship.thrust*dt;
        ship.vx *= 0.995;
        ship.vy *= 0.995;
        ship.x += ship.vx*dt;
        ship.y += ship.vy*dt;
        wrapPos(ship);

        bullets.forEach(b=>{b.x+=b.vx*dt; b.y+=b.vy*dt; b.life-=dt; wrapPos(b);});
        bullets = bullets.filter(b=>b.life>0);
        asteroids.forEach(a=>{a.x+=a.vx*dt; a.y+=a.vy*dt; wrapPos(a);});

        for(let i=asteroids.length-1;i>=0;i--){
            const a = asteroids[i];
            if(dist(a,ship)<a.r+ship.r){ lives--; ship.x=W/2; ship.y=H/2; ship.vx=0; ship.vy=0; }
            for(let j=bullets.length-1;j>=0;j--){
                const b = bullets[j];
                if(Math.hypot(b.x-a.x,b.y-a.y)<a.r){
                    bullets.splice(j,1); asteroids.splice(i,1); score+=100;
                    break;
                }
            }
        }
        hud.textContent=`Score: ${score}  Lives: ${lives}  Asteroids: ${asteroids.length}`;
    }

    function render(){
        ctx.clearRect(0,0,W,H);
        ctx.save();
        ctx.translate(ship.x,ship.y);
        ctx.rotate(ship.a);
        ctx.strokeStyle='#cfc'; ctx.lineWidth=2;
        ctx.beginPath();
        ctx.moveTo(ship.r,0); ctx.lineTo(-ship.r/2, ship.r/1.5); ctx.lineTo(-ship.r/2, -ship.r/1.5); ctx.closePath();
        ctx.stroke();
        ctx.restore();

        ctx.strokeStyle='#fff'; ctx.lineWidth=2;
        asteroids.forEach(a=>{
            ctx.beginPath();
            for(let i=0;i<a.verts;i++){
                const ang=i/(a.verts)*Math.PI*2;
                const rad=a.r*a.offs[i];
                const px=a.x+Math.cos(ang)*rad;
                const py=a.y+Math.sin(ang)*rad;
                if(i===0) ctx.moveTo(px,py); else ctx.lineTo(px,py);
            }
            ctx.closePath(); ctx.stroke();
        });

        ctx.strokeStyle='#ff0'; ctx.lineWidth=1;
        bullets.forEach(b=>{ctx.beginPath();ctx.moveTo(b.x,b.y);ctx.lineTo(b.x-b.vx*2,b.y-b.vy*2);ctx.stroke();});
    }

    function cleanup(){
        window.__asteroidsBookmarkletRunning=false;
        window.removeEventListener('resize', resizeHandler);
        overlay.remove();
        fireBtn.remove();
        stopBtn.remove();
        style.remove();
    }

    let last = performance.now();
    function loop(now){
        const dt = Math.min(40, now-last);
        last = now;
        if(!paused) update(dt/16.6667);
        render();
        if(window.__asteroidsBookmarkletRunning) requestAnimationFrame(loop);
    }
    requestAnimationFrame(loop);
}

// Prevent multiple instances
if (!window.__asteroidsBookmarkletRunning) {
    window.__asteroidsBookmarkletRunning = true;

    // CSS: Add Orbitron font from Google Fonts
    const orbitronLink = document.createElement('link');
    orbitronLink.rel = 'stylesheet';
    orbitronLink.href = 'https://fonts.googleapis.com/css?family=Orbitron:700';
    document.head.appendChild(orbitronLink);

    // Create black overlay
    const overlay = document.createElement('div');
    Object.assign(overlay.style, {
        position: 'fixed',
        top: 0,
        left: 0,
        width: '100%',
        height: '100%',
        background: '#000',
        zIndex: 2147483645
    });
    document.body.appendChild(overlay);

    // Game CSS
    const css = `
    .ast-root{position:fixed;left:0;top:0;width:100%;height:100%;z-index:2147483646}
    .ast-canvas{position:absolute;left:0;top:0;width:100%;height:100%;background:transparent}
    .ast-hud{position:fixed;left:10px;top:10px;color:#0f0;font:12px/1 monospace;text-shadow:0 0 6px #000}
    .ast-fire-btn{position:fixed;bottom:20px;right:20px;z-index:2147483647;padding:10px 18px;background:#00ff99;color:#000;border:none;border-radius:6px;font-weight:bold;cursor:pointer;user-select:none;}
    .ast-explode-elem{transition:transform 600ms cubic-bezier(.2,.9,.2,1),opacity 600ms ease;transform-origin:center center;pointer-events:none;}
    .ast-gameover {
        position: fixed;
        top: 45%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: red;
        font-size: 96px;
        font-family: Orbitron, Impact, sans-serif;
        text-shadow: 0 0 30px #f00, 0 0 60px #ff0;
        z-index: 2147483648;
        display: none;
        text-align: center;
        opacity: 0;
        transition: opacity 1s ease-in;
    }
    .ast-restart-btn {
        position: fixed;
        top: 60%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: #00ff99;
        color: #000;
        font-weight: bold;
        font-family: monospace;
        padding: 14px 28px;
        border: none;
        border-radius: 10px;
        font-size: 20px;
        cursor: pointer;
        opacity: 0;
        display: none;
        transition: opacity 1s ease-in;
        z-index: 2147483649;
        box-shadow: 0 0 20px #00ff99;
    }
    .ast-restart-btn:hover { background: #00ffaa; }
    .ast-stop-btn {
        font-family: Orbitron, Impact, sans-serif;
    }
    .ast-levelup-text {
        position: fixed;
        top: 45%;
        left: 50%;
        transform: translate(-50%,-50%);
        font-family: Orbitron, Impact, sans-serif;
        font-weight: bold;
        font-size: 88px;
        color: #00eeff;
        text-shadow: 0 0 40px #00eeff, 0 0 100px #fff;
        z-index: 2147483648;
        pointer-events: none;
        opacity: 0;
        transition: opacity 1.1s cubic-bezier(.4,.7,.2,1);
        text-align: center;
    }
    .ast-upgrade-modal {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%,-50%);
        z-index: 2147483649;
        background: rgba(20,30,60,0.97);
        border-radius: 22px;
        box-shadow: 0 0 80px #00eeff;
        padding: 38px 52px 36px 52px;
        display: none;
        flex-direction: column;
        align-items: center;
    }
    .ast-upgrade-modal h2 {
        font-family: Orbitron, Impact, sans-serif;
        color: #00eeff;
        font-size: 42px;
        margin-bottom: 22px;
        letter-spacing: 2px;
        text-shadow: 0 0 16px #00eeff, 0 0 32px #fff;
    }
    .ast-upgrade-btn-choice {
        background: #032CDE;
        color: #fff;
        font-family: Orbitron, Impact, sans-serif;
        font-weight: bold;
        margin: 14px 0;
        padding: 18px 36px;
        border: none;
        border-radius: 10px;
        font-size: 26px;
        box-shadow: 0 0 22px #032CDE;
        cursor: pointer;
        transition: background 0.2s;
    }
    .ast-upgrade-btn-choice:hover {
        background: #0555fa;
        color: #ffe;
    }
    .ast-upgrade-confirm {
        color: #00ff99;
        font-family: Orbitron, Impact, sans-serif;
        font-size: 32px;
        margin-top: 22px;
        text-shadow: 0 0 12px #00ff99;
        text-align: center;
    }
    `;
    const style = document.createElement('style');
    style.textContent = css;
    document.head.appendChild(style);

    // Root container
    const root = document.createElement('div');
    root.className = 'ast-root';
    document.documentElement.appendChild(root);

    // Canvas
    const canvas = document.createElement('canvas');
    canvas.className = 'ast-canvas';
    root.appendChild(canvas);
    const ctx = canvas.getContext('2d');
    let W = canvas.width = window.innerWidth;
    let H = canvas.height = window.innerHeight;

    // HUD
    const hud = document.createElement('div');
    hud.className = 'ast-hud';
    root.appendChild(hud);

    // Game over text
    const gameOverText = document.createElement('div');
    gameOverText.className = 'ast-gameover';
    gameOverText.textContent = 'GAME OVER';
    document.body.appendChild(gameOverText);

    // Restart button
    const restartBtn = document.createElement('button');
    restartBtn.className = 'ast-restart-btn';
    restartBtn.textContent = 'RESTART';
    restartBtn.addEventListener('click', restartGame);
    document.body.appendChild(restartBtn);

    // Stop & revert button
    const stopBtn = document.createElement('button');
    stopBtn.textContent = 'STOP & REVERT';
    stopBtn.className = 'ast-stop-btn';
    Object.assign(stopBtn.style, {
        position: 'fixed',
        bottom: '20px',
        left: '20px',
        zIndex: 2147483647,
        padding: '10px 18px',
        background: '#ff5555',
        color: '#fff',
        border: 'none',
        borderRadius: '6px',
        fontWeight: 'bold',
        cursor: 'pointer'
    });
    stopBtn.addEventListener('click', cleanup);
    document.body.appendChild(stopBtn);

    // Make sure stopBtn can be removed when game ends
    let stopBtnInterval = setInterval(() => {
        Object.assign(stopBtn.style, {
            position: 'fixed',
            bottom: '20px',
            left: '20px',
            zIndex: 2147483647,
            padding: '10px 18px',
            background: '#ff5555',
            color: '#fff',
            border: 'none',
            borderRadius: '6px',
            fontWeight: 'bold',
            cursor: 'pointer',
            display: '',
            opacity: '1'
        });
        if (!document.body.contains(stopBtn)) document.body.appendChild(stopBtn);
    }, 500);

    // Level up animation DOM
    const levelUpText = document.createElement('div');
    levelUpText.className = 'ast-levelup-text';
    levelUpText.textContent = '';
    levelUpText.style.display = 'none';
    document.body.appendChild(levelUpText);

    // Upgrade modal UI
    const upgradeModal = document.createElement('div');
    upgradeModal.className = 'ast-upgrade-modal';
    document.body.appendChild(upgradeModal);

    // Resize
    window.addEventListener('resize', () => {
        W = canvas.width = window.innerWidth;
        H = canvas.height = window.innerHeight;
    });

    // Game state variables
    let ship, bullets, asteroids, particles, keys, score, lives, paused, gameOver;
    let boss = null, bossLasers = [];
    let enemies = [], enemyBullets = [], enemySpawnTimer = 0;
    let bossDeathAnim = null;
    let level = 1;
    let levelUpAnim = null;
    let upgrades = {
        fireRate: 1,
        bulletSpeed: 1,
        shipSpeed: 1,
        shipLives: 0
    };
    let upgradeReady = false;

    function removeBossHealthBar() {
        const healthBar = document.querySelector('.ast-boss-health');
        if (healthBar) healthBar.remove();
    }

    function initGame() {
        bossDeathAnim = null;
        levelUpAnim = null;
        levelUpText.style.display = 'none';
        levelUpText.style.opacity = '0';
        upgradeModal.style.display = 'none';
        upgradeReady = false;
        ship = {
            x: W/2, y: H/2, r: 18, a: -Math.PI/2, rot: 0, thrust: 0, vx: 0, vy: 0,
            immunity: 0,
            immunityBlink: 0,
            shootCooldown: 0
        };
        bullets = [];
        asteroids = [];
        particles = [];
        keys = {};
        score = 0;
        lives = 5 + upgrades.shipLives;
        paused = false;
        gameOver = false;
        boss = null;
        bossLasers = [];
        enemies = [];
        enemyBullets = [];
        enemySpawnTimer = 0;
        hud.textContent = '';
        gameOverText.style.display = 'none';
        gameOverText.style.opacity = '0';
        restartBtn.style.display = 'none';
        restartBtn.style.opacity = '0';
        removeBossHealthBar();
        for(let i=0;i<8+level;i++) spawnAsteroid();
    }

    function rand(min, max){ return Math.random() * (max - min) + min; }
    function dist(a,b){ return Math.hypot(a.x-b.x, a.y-b.y); }
    function wrapPos(o){
        if(o.x<-50)o.x=W+50;
        if(o.x>W+50)o.x=-50;
        if(o.y<-50)o.y=H+50;
        if(o.y>H+50)o.y=-50;
    }

    function spawnAsteroid(size, x, y){
        const r = size || rand(20,60);
        let posX = x !== undefined ? x : (rand(0,W));
        let posY = y !== undefined ? y : (rand(0,H));
        const angle = rand(0, Math.PI*2);
        asteroids.push({
            x: posX,
            y: posY,
            r,
            vx: Math.cos(angle)*rand(0.3,1.2),
            vy: Math.sin(angle)*rand(0.3,1.2),
            verts: Math.floor(rand(6,12)),
            offs: Array.from({length: Math.floor(rand(6,12))},()=>rand(0.55,1.45))
        });
    }

    function blowElementAt(x,y){
        try {
            const el = document.elementFromPoint(Math.min(W-1, Math.max(0,x)), Math.min(H-1, Math.max(0,y)));
            if(!el || el===canvas || root.contains(el) || el===document.documentElement || el===document.body || el.classList.contains('ast-stop-btn')) return;
            const rect = el.getBoundingClientRect();
            const clone = el.cloneNode(true);
            clone.style.position = 'fixed';
            clone.style.left = rect.left+'px';
            clone.style.top = rect.top+'px';
            clone.style.width = rect.width+'px';
            clone.style.height = rect.height+'px';
            clone.style.margin = '0';
            clone.style.zIndex = 2147483646;
            clone.classList.add('ast-explode-elem');
            document.body.appendChild(clone);
            if(!el.dataset._astored){ el.dataset._astored='1'; el.style.transition='opacity 400ms ease'; }
            el.style.opacity='0.05';
            const dx = (clone.getBoundingClientRect().left + rect.width/2) - W/2;
            const dy = (clone.getBoundingClientRect().top + rect.height/2) - H/2;
            const ang = Math.atan2(dy,dx) + (Math.random()-0.5);
            const tx = Math.cos(ang)*rand(120,400);
            const ty = Math.sin(ang)*rand(120,400);
            clone.style.transform = `translate(${tx}px,${ty}px) rotate(${rand(-720,720)}deg) scale(${rand(0.6,1.4)})`;
            clone.style.opacity='0';
            setTimeout(()=>clone.remove(), 800);
            setTimeout(()=>{ if (el && el.parentNode) el.remove(); }, 1200);
        } catch(e){}
    }

    window.addEventListener('keydown', e => {
        if(e.key==='Escape'){ cleanup(); return; }
        if(e.key==='p'||e.key==='P'){ paused=!paused; e.preventDefault(); return; }
        keys[e.key] = true;
    });
    window.addEventListener('keyup', e => { keys[e.key] = false; });

    function shoot(){
        if (gameOver) return;
        if (ship.shootCooldown > 0) return;
        ship.shootCooldown = Math.max(8, 18 - upgrades.fireRate*4);
        const speed=8 + 4*upgrades.bulletSpeed;
        const bx=ship.x+Math.cos(ship.a)*ship.r;
        const by=ship.y+Math.sin(ship.a)*ship.r;
        bullets.push({x:bx, y:by, vx:ship.vx+Math.cos(ship.a)*speed, vy:ship.vy+Math.sin(ship.a)*speed, life:50});
    }

    // Fire button
    const fireBtn = document.createElement('button');
    fireBtn.className = 'ast-fire-btn';
    fireBtn.textContent = 'FIRE';
    fireBtn.addEventListener('click', shoot);
    document.body.appendChild(fireBtn);

    function spawnParticle(x,y){ particles.push({x,y,vx:rand(-3,3),vy:rand(-3,3),life:rand(20,60),s:rand(1,3)}); }
    function splitAsteroid(a){ if(a.r>20){ spawnAsteroid(a.r/2, a.x+rand(-10,10), a.y+rand(-10,10)); spawnAsteroid(a.r/2, a.x+rand(-10,10), a.y+rand(-10,10)); } }

    function spawnBoss() {
        boss = {
            x: W/2,
            y: 100,
            w: 140,
            h: 60,
            health: 50+level*10,
            maxHealth: 50+level*10,
            vx: 1.5+level*0.3,
            shootTimer: 0
        };
        if (!document.querySelector('.ast-boss-health')) {
            const healthBar = document.createElement('div');
            healthBar.className = 'ast-boss-health';
            Object.assign(healthBar.style, {
                position: 'fixed',
                top: '20px',
                left: '50%',
                transform: 'translateX(-50%)',
                width: '400px',
                height: '20px',
                background: '#444',
                border: '2px solid #fff',
                zIndex: 2147483648
            });

            const innerBar = document.createElement('div');
            innerBar.className = 'ast-boss-health-inner';
            Object.assign(innerBar.style, {
                width: '100%',
                height: '100%',
                background: '#f00'
            });

            healthBar.appendChild(innerBar);
            document.body.appendChild(healthBar);
        }
    }

    function updateBossHealthBar() {
        const bar = document.querySelector('.ast-boss-health-inner');
        if (!boss || !bar || gameOver) {
            removeBossHealthBar();
            return;
        }
        bar.style.width = (boss.health / boss.maxHealth * 100) + '%';
    }

    function shootBossLaser() {
        if (!boss) return;
        const dx = ship.x - boss.x;
        const dy = ship.y - boss.y;
        const angle = Math.atan2(dy, dx);
        const speed = 8+level*1.5;
        bossLasers.push({
            x: boss.x + Math.cos(angle) * boss.w/2,
            y: boss.y + Math.sin(angle) * boss.h/2,
            vx: Math.cos(angle) * speed,
            vy: Math.sin(angle) * speed,
            life: 150
        });
    }

    function explodeBoss() {
        bossDeathAnim = {
            x: boss.x,
            y: boss.y,
            w: boss.w,
            h: boss.h,
            t: 0,
            particles: []
        };
        for (let i = 0; i < 100; i++) {
            bossDeathAnim.particles.push({
                x: boss.x + rand(-boss.w/2, boss.w/2),
                y: boss.y + rand(-boss.h/2, boss.h/2),
                vx: rand(-6,6),
                vy: rand(-6,6),
                life: rand(40,90),
                color: rand(0,1)>0.5 ? "#0ff" : "#f0f"
            });
        }
        score += 1000;
        hud.textContent = 'BOSS DEFEATED!';
        boss = null;
        updateBossHealthBar();
        upgradeReady = true;
        setTimeout(() => showLevelUp(level+1), 1200);
        setTimeout(() => showUpgrade(), 2800);
    }

    function showLevelUp(newLevel){
        levelUpText.textContent = `LEVEL ${newLevel}`;
        levelUpText.style.display = 'block';
        levelUpText.style.opacity = '0';
        setTimeout(() => levelUpText.style.opacity = '1', 100);
        setTimeout(() => levelUpText.style.opacity = '0', 1600);
        setTimeout(() => levelUpText.style.display = 'none', 2600);
    }

    function showUpgrade() {
        if (!upgradeReady) return;
        upgradeModal.innerHTML = '';
        upgradeModal.style.display = 'flex';
        let h2 = document.createElement('h2');
        h2.textContent = 'CHOOSE AN UPGRADE';
        upgradeModal.appendChild(h2);
        const upgradesList = [
            {key: 'fireRate', label: 'Fire Rate'},
            {key: 'bulletSpeed', label: 'Bullet Speed'},
            {key: 'shipSpeed', label: 'Ship Speed'},
            {key: 'shipLives', label: 'Extra Life'}
        ];
        upgradesList.forEach(opt => {
            let btn = document.createElement('button');
            btn.className = 'ast-upgrade-btn-choice';
            btn.textContent = opt.label + (upgrades[opt.key] >= 3 ? ' (MAX)' : '');
            btn.disabled = upgrades[opt.key] >= 3;
            btn.onclick = () => {
                upgrades[opt.key]++;
                upgradeModal.innerHTML = `<div class="ast-upgrade-confirm">Upgrade: ${opt.label}!<br>Ready for LEVEL ${level+1}</div>`;
                setTimeout(() => {
                    upgradeModal.style.display = 'none';
                    nextLevel();
                }, 1600);
            };
            upgradeModal.appendChild(btn);
        });
    }

    function updateBoss(dt) {
        if (!boss) return;
        boss.x += boss.vx * dt;
        if (boss.x < boss.w / 2 || boss.x > W - boss.w / 2) boss.vx *= -1;
        boss.shootTimer -= dt;
        if (boss.shootTimer <= 0) {
            shootBossLaser();
            boss.shootTimer = 80;
        }
        for (let i = bullets.length - 1; i >= 0; i--) {
            const b = bullets[i];
            if (b.x > boss.x - boss.w/2 && b.x < boss.x + boss.w/2 &&
                b.y > boss.y - boss.h/2 && b.y < boss.y + boss.h/2) {
                bullets.splice(i, 1);
                boss.health--;
                spawnParticle(b.x, b.y);
                if (boss.health <= 0) {
                    explodeBoss();
                }
            }
        }
        bossLasers.forEach(l => {
            l.x += l.vx * dt;
            l.y += l.vy * dt;
            l.life -= dt;
            if (dist(l, ship) < ship.r + 3 && ship.immunity <= 0) { l.life = 0; explodeShip(); }
        });
        bossLasers = bossLasers.filter(l => l.life > 0);
        updateBossHealthBar();
    }

    function renderBoss(anim) {
        let bx = anim ? anim.x : boss.x;
        let by = anim ? anim.y : boss.y;
        let bw = anim ? anim.w : boss.w;
        let bh = anim ? anim.h : boss.h;
        let alpha = anim ? 1-Math.min(1,anim.t/60) : 1;
        ctx.save();
        ctx.globalAlpha = alpha;
        ctx.translate(bx, by);

        // Main hull
        ctx.save();
        ctx.shadowColor = '#80f';
        ctx.shadowBlur = 40;
        ctx.fillStyle = '#282858';
        ctx.strokeStyle = '#f0f';
        ctx.lineWidth = 6;
        ctx.beginPath();
        ctx.moveTo(-bw/2, bh/2);
        ctx.bezierCurveTo(-bw/2, -bh/2, bw/2, -bh/2, bw/2, bh/2);
        ctx.closePath();
        ctx.fill();
        ctx.stroke();
        ctx.restore();

        // Cockpit
        ctx.save();
        ctx.beginPath();
        ctx.ellipse(0, -bh/4, bw/7, bh/5, 0, 0, Math.PI*2);
        ctx.fillStyle = '#44f7ff';
        ctx.globalAlpha = 0.85;
        ctx.shadowColor = '#44f7ff';
        ctx.shadowBlur = 16;
        ctx.fill();
        ctx.restore();

        // Left wing
        ctx.save();
        ctx.beginPath();
        ctx.moveTo(-bw/2, bh/2);
        ctx.lineTo(-bw*0.7, bh*1.1);
        ctx.lineTo(-bw/4, bh/2);
        ctx.closePath();
        ctx.fillStyle = '#7cf';
        ctx.globalAlpha = 0.85;
        ctx.shadowColor = '#7cf';
        ctx.shadowBlur = 12;
        ctx.fill();
        ctx.restore();

        // Right wing
        ctx.save();
        ctx.beginPath();
        ctx.moveTo(bw/2, bh/2);
        ctx.lineTo(bw*0.7, bh*1.1);
        ctx.lineTo(bw/4, bh/2);
        ctx.closePath();
        ctx.fillStyle = '#7cf';
        ctx.globalAlpha = 0.85;
        ctx.shadowColor = '#7cf';
        ctx.shadowBlur = 12;
        ctx.fill();
        ctx.restore();

        // Engine glow (lower hull)
        ctx.save();
        ctx.beginPath();
        ctx.arc(0, bh/2, bw/6, 0, Math.PI*2);
        ctx.fillStyle = "#0ff";
        ctx.globalAlpha = 0.5;
        ctx.shadowColor = "#0ff";
        ctx.shadowBlur = 16;
        ctx.fill();
        ctx.restore();

        // Boss lasers
        if (!anim) bossLasers.forEach(l => {
            ctx.save();
            ctx.shadowColor = "#ff0ff0";
            ctx.shadowBlur = 18;
            ctx.globalAlpha = 0.90;
            ctx.strokeStyle = '#ff00ff';
            ctx.lineWidth = 10;
            ctx.beginPath();
            ctx.moveTo(l.x - boss.x, l.y - boss.y);
            ctx.lineTo(l.x - boss.x - l.vx*3, l.y - boss.y - l.vy*3);
            ctx.stroke();
            ctx.restore();
        });

        ctx.restore();
    }

    function renderBossDeath() {
        if (!bossDeathAnim) return;
        renderBoss(bossDeathAnim);
        bossDeathAnim.particles.forEach(p=>{
            ctx.save();
            ctx.globalAlpha = Math.max(0, p.life/90);
            ctx.fillStyle = p.color;
            ctx.shadowColor = p.color;
            ctx.shadowBlur = 14;
            ctx.beginPath();
            ctx.arc(p.x, p.y, rand(4,10), 0, Math.PI*2);
            ctx.fill();
            ctx.restore();
        });
    }

    function updateBossDeathAnim(dt){
        if (!bossDeathAnim) return;
        bossDeathAnim.t += dt;
        bossDeathAnim.particles.forEach(p=>{
            p.x += p.vx * dt/16.6667;
            p.y += p.vy * dt/16.6667;
            p.life -= dt;
        });
        bossDeathAnim.particles = bossDeathAnim.particles.filter(p=>p.life > 0);
        if (bossDeathAnim.t > 60 && bossDeathAnim.particles.length === 0) bossDeathAnim = null;
    }

    function spawnEnemy(){
        const side=Math.random()<0.5?'left':'right'; const y=rand(50,H-50); const x=side==='left'?-40:W+40; const vx=side==='left'?rand(1.5,2.2):rand(-2.2,-1.5);
        enemies.push({x,y,vx,vy:rand(-0.5,0.5),r:20,a:0,shootTimer:rand(50,120),turnSpeed:0.03});
    }
    function shootAtPlayer(e){ const angle=Math.atan2(ship.y-e.y,ship.x-e.x); const speed=6; enemyBullets.push({x:e.x+Math.cos(e.a)*e.r,y:e.y+Math.sin(e.a)*e.r,vx:Math.cos(angle)*speed,vy:Math.sin(angle)*speed,life:120}); }
    function updateEnemies(dt){
        enemySpawnTimer-=dt; if(enemySpawnTimer<=0){ spawnEnemy(); enemySpawnTimer=rand(400,700); }
        enemies.forEach(e=>{
            const dx=ship.x-e.x, dy=ship.y-e.y; const targetAngle=Math.atan2(dy,dx);
            let angleDiff=targetAngle-e.a; if(angleDiff>Math.PI) angleDiff-=Math.PI*2; if(angleDiff<-Math.PI) angleDiff+=Math.PI*2; e.a+=Math.sign(angleDiff)*e.turnSpeed*dt;
            e.vx+=Math.cos(e.a)*0.05*dt; e.vy+=Math.sin(e.a)*0.05*dt;
            asteroids.forEach(a=>{ const d=dist(e,a); if(d<a.r+80){ const avoidAng=Math.atan2(e.y-a.y,e.x-a.x); e.vx+=Math.cos(avoidAng)*0.1*dt; e.vy+=Math.sin(avoidAng)*0.1*dt; }});
            const spd=Math.hypot(e.vx,e.vy); if(spd>2.5){ e.vx*=2.5/spd; e.vy*=2.5/spd; }
            e.x+=e.vx*dt; e.y+=e.vy*dt; e.shootTimer-=dt; if(e.shootTimer<=0){ shootAtPlayer(e); e.shootTimer=rand(80,160); }
        });
        enemyBullets.forEach((b, bi) => {
            b.x += b.vx * dt;
            b.y += b.vy * dt;
            b.life -= dt;
            for(let ai = asteroids.length - 1; ai >= 0; ai--) {
                const a = asteroids[ai];
                if (dist(b, a) < a.r + 7) {
                    enemyBullets.splice(bi, 1);
                    asteroids.splice(ai, 1);
                    score += 100;
                    for(let k=0;k<Math.floor(a.r/2);k++) spawnParticle(a.x,a.y);
                    blowElementAt(a.x,a.y);
                    splitAsteroid(a);
                    break;
                }
            }
        });
        enemyBullets = enemyBullets.filter(b=>b.life>0);
        for(let b of enemyBullets){ if(dist(b,ship)<ship.r+2 && ship.immunity <= 0){ b.life=0; explodeShip(); break; } }
        for(let i=enemies.length-1;i>=0;i--){ const e=enemies[i]; for(let j=bullets.length-1;j>=0;j--){ const b=bullets[j]; if(dist(b,e)<e.r){ enemies.splice(i,1); bullets.splice(j,1); score+=200; for(let k=0;k<25;k++) spawnParticle(e.x,e.y); break; } } }
    }

    function explodeShip(){
        for(let k=0;k<30;k++) spawnParticle(ship.x,ship.y);
        lives--; ship.x=W/2; ship.y=H/2; ship.vx=0; ship.vy=0;
        ship.immunity = 120;
        ship.immunityBlink = 0;
        if(lives<=0){
            hud.textContent='GAME OVER';
            gameOverText.style.display='block';
            restartBtn.style.display='block';
            setTimeout(()=>{ gameOverText.style.opacity='1'; restartBtn.style.opacity='1'; },50);
            gameOver=true;
            removeBossHealthBar();
        }
    }

    function nextLevel() {
        level++;
        bossDeathAnim = null;
        boss = null;
        bossLasers = [];
        enemies = [];
        enemyBullets = [];
        bullets = [];
        particles = [];
        asteroids = [];
        for(let i=0;i<8+level;i++) spawnAsteroid();
        ship.x = W/2;
        ship.y = H/2;
        ship.vx = 0;
        ship.vy = 0;
        ship.immunity = 80;
        score = 0;
        hud.textContent = `Level ${level}`;
    }

    function update(dt){
        if(gameOver) return;
        if(ship.immunity > 0) {
            ship.immunity -= dt;
            if(ship.immunity < 0) ship.immunity = 0;
        }
        updateEnemies(dt);
        updateBoss(dt);
        updateBossDeathAnim(dt);

        ship.shootCooldown = Math.max(0, ship.shootCooldown-1);

        if(keys['ArrowLeft']||keys['a']) ship.rot=-0.08*upgrades.shipSpeed; else if(keys['ArrowRight']||keys['d']) ship.rot=0.08*upgrades.shipSpeed; else ship.rot=0;
        ship.thrust=keys['ArrowUp']||keys['w']?0.18*upgrades.shipSpeed:0;
        if(keys[' ']&&!keys._spaceDown){ shoot(); keys._spaceDown=true; }
        if(!keys[' ']) keys._spaceDown=false;

        ship.a+=ship.rot*dt; ship.vx+=Math.cos(ship.a)*ship.thrust*dt; ship.vy+=Math.sin(ship.a)*ship.thrust*dt;
        ship.vx*=0.995; ship.vy*=0.995; ship.x+=ship.vx*dt; ship.y+=ship.vy*dt; wrapPos(ship);

        bullets.forEach(b=>{ b.x+=b.vx*dt; b.y+=b.vy*dt; b.life-=dt; wrapPos(b); });
        bullets=bullets.filter(b=>b.life>0);

        for(let i=asteroids.length-1;i>=0;i--){
            const a=asteroids[i]; a.x+=a.vx*dt; a.y+=a.vy*dt; wrapPos(a);
            if(dist(a,ship)<a.r+ship.r && ship.immunity <= 0){ explodeShip(); }
            for(let j=bullets.length-1;j>=0;j--){ 
                const b=bullets[j];
                if(dist(b,a)<a.r+7){ 
                    bullets.splice(j,1); asteroids.splice(i,1); score+=100; 
                    for(let k=0;k<Math.floor(a.r/2);k++) spawnParticle(a.x,a.y); 
                    blowElementAt(a.x,a.y); splitAsteroid(a); break; 
                } 
            }
        }
        particles.forEach(p=>{ p.x+=p.vx*dt; p.y+=p.vy*dt; p.life-=dt; });
        particles=particles.filter(p=>p.life>0);
        if(asteroids.length<6 && Math.random()<0.02) spawnAsteroid();
        hud.textContent=`Score: ${score}  Lives: ${lives}  Asteroids: ${asteroids.length}  Level: ${level}  Upgrades: ${Object.entries(upgrades).map(([k,v])=> v ? `${k}:${v}`:'').filter(Boolean).join(' ')}`;
        if(!boss && !bossDeathAnim && score>=2000) spawnBoss();
    }

    function render(){
        ctx.clearRect(0,0,W,H);

        // Draw asteroids
        ctx.strokeStyle='#fff'; ctx.lineWidth=2;
        asteroids.forEach(a=>{
            ctx.beginPath();
            for(let i=0;i<a.verts;i++){
                const ang=i/a.verts*Math.PI*2;
                const rad=a.r*a.offs[i];
                const px=a.x+Math.cos(ang)*rad;
                const py=a.y+Math.sin(ang)*rad;
                if(i===0) ctx.moveTo(px,py); else ctx.lineTo(px,py);
            }
            ctx.closePath(); ctx.stroke();
        });

        // Draw player bullets: #032CDE with visible radius 8, hitbox 7
        bullets.forEach(b=>{
            ctx.save();
            ctx.globalAlpha = 0.98;
            ctx.shadowColor = "#032CDE";
            ctx.shadowBlur = 24;
            ctx.strokeStyle = "#032CDE";
            ctx.lineWidth = 7;
            ctx.beginPath();
            ctx.arc(b.x, b.y, 8, 0, Math.PI*2); // visual radius 8
            ctx.stroke();
            ctx.restore();

            // Trailing effect
            ctx.save();
            ctx.globalAlpha = 0.35;
            ctx.strokeStyle = "#032CDE";
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.moveTo(b.x, b.y);
            ctx.lineTo(b.x - b.vx*4, b.y - b.vy*4);
            ctx.stroke();
            ctx.restore();
        });

        // Draw enemy bullets
        enemyBullets.forEach(b=>{
            ctx.save();
            ctx.globalAlpha = 0.93;
            ctx.shadowColor = "#f60";
            ctx.shadowBlur = 14;
            ctx.strokeStyle = "#f66";
            ctx.lineWidth = 5;
            ctx.beginPath();
            ctx.arc(b.x, b.y, 7, 0, Math.PI*2);
            ctx.stroke();
            ctx.restore();

            // Trailing effect
            ctx.save();
            ctx.globalAlpha = 0.4;
            ctx.strokeStyle = "#f33";
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.moveTo(b.x, b.y);
            ctx.lineTo(b.x - b.vx*4, b.y - b.vy*4);
            ctx.stroke();
            ctx.restore();
        });

        // Draw particles
        ctx.fillStyle='#0f0';
        particles.forEach(p=>{
            ctx.beginPath();
            ctx.arc(p.x, p.y, p.s, 0, Math.PI*2);
            ctx.fill();
        });

        // Draw enemies
        ctx.strokeStyle='#f33'; ctx.lineWidth=2;
        enemies.forEach(e=>{
            ctx.save();
            ctx.translate(e.x,e.y);
            ctx.rotate(e.a);

            ctx.beginPath();
            ctx.moveTo(e.r,0);
            ctx.lineTo(-e.r,-e.r/2);
            ctx.lineTo(-e.r,e.r/2);
            ctx.closePath();
            ctx.stroke();

            ctx.restore();
        });

        // Draw boss or its death animation
        if (boss) renderBoss();
        if (bossDeathAnim) renderBossDeath();

        // Draw player ship with immunity blink and cooler look
        if(!gameOver){
            let drawShip = true;
            if(ship.immunity > 0) {
                ship.immunityBlink++;
                drawShip = (Math.floor(ship.immunityBlink / 4) % 2 === 0);
            }
            if(drawShip){
                ctx.save();
                ctx.translate(ship.x,ship.y);
                ctx.rotate(ship.a);

                // Main ship body - glowing outline
                ctx.shadowColor = "#0ff";
                ctx.shadowBlur = ship.immunity > 0 ? 25 : 12;
                ctx.lineWidth = 3;
                ctx.strokeStyle = ship.immunity > 0 ? "#fff" : "#0ff";
                ctx.beginPath();
                ctx.moveTo(ship.r,0);
                ctx.lineTo(-ship.r*0.6,ship.r*0.6);
                ctx.lineTo(-ship.r*0.7,0);
                ctx.lineTo(-ship.r*0.6,-ship.r*0.6);
                ctx.closePath();
                ctx.stroke();
                ctx.shadowBlur = 0;

                // Ship cockpit glass
                ctx.save();
                ctx.rotate(Math.PI/12);
                ctx.fillStyle = "#44f7";
                ctx.beginPath();
                ctx.arc(ship.r*0.3, 0, ship.r*0.5, -0.5, 0.5);
                ctx.fill();
                ctx.restore();

                // Ship wings
                ctx.save();
                ctx.strokeStyle = "#0ff";
                ctx.lineWidth = 2;
                ctx.beginPath();
                ctx.moveTo(-ship.r*0.7,0);
                ctx.lineTo(-ship.r*1.2,ship.r*0.8);
                ctx.moveTo(-ship.r*0.7,0);
                ctx.lineTo(-ship.r*1.2,-ship.r*0.8);
                ctx.stroke();
                ctx.restore();

                // Ship rear jet glow
                if(ship.thrust){
                    ctx.save();
                    ctx.globalAlpha = 0.7;
                    ctx.shadowColor = "orange";
                    ctx.shadowBlur = 18;
                    ctx.fillStyle = "orange";
                    ctx.beginPath();
                    ctx.moveTo(-ship.r*0.7,0);
                    ctx.lineTo(-ship.r*1.2,6);
                    ctx.lineTo(-ship.r*1.2,-6);
                    ctx.closePath();
                    ctx.fill();
                    ctx.restore();
                }
                ctx.restore();
            }
        }
    }

    function restartGame(){ level=1; upgrades={fireRate:1,bulletSpeed:1,shipSpeed:1,shipLives:0}; initGame(); }
    function cleanup(){
        window.__asteroidsBookmarkletRunning=false;
        clearInterval(stopBtnInterval);
        overlay.remove();
        root.remove();
        fireBtn.remove();
        stopBtn.remove();
        style.remove();
        gameOverText.remove();
        restartBtn.remove();
        levelUpText.remove();
        upgradeModal.remove();
        removeBossHealthBar();
    }

    let last = performance.now();
    function loop(now){
        const dt=Math.min(40,now-last); last=now;
        if(!paused) update(dt/16.6667);
        render();
        if(window.__asteroidsBookmarkletRunning) requestAnimationFrame(loop);
    }

    initGame(); requestAnimationFrame(loop);
}
